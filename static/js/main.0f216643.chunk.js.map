{"version":3,"sources":["animationOfCalibration/AnimationOfCalibration.js","helloBlock/HelloBlock.js","helper/Helper.js","constants/MainConstants.js","mainApp/App.js","index.js"],"names":["AnimationOfCalibration","props","className","style","top","left","HelloBlock","createMatrix","x","y","circlePointsMatrix","randomizer","xMinusOne","yMinusOne","yConst","pointY","i","xArray","xConst","pointX","j","push","Math","round","START_TOP","START_LEFT","App","state","showStartButton","showHelloBlock","isCalibrationStart","showHelloBlockAndStartAnimation","setState","Promise","res","setTimeout","changeCirclePositionWithRightDelay","matrixObject","getRandomElementFromArray","array","index","floor","random","length","element","splice","split","this","interval","setInterval","changeCirclePosition","matrix","coordinates","values","console","log","flag","onClick","React","Component","ReactDOM","render","document","getElementById"],"mappings":"qSAceA,G,YAXgB,SAACC,GAG5B,OACI,yBAAKC,UAAU,6BAA6BC,MAAO,CAAEC,IAAI,GAAD,OAAKH,EAAMG,IAAX,KAAmBC,KAAK,GAAD,OAAKJ,EAAMI,KAAX,OAC3E,yBAAKH,UAAU,wBACf,yBAAKA,UAAU,6BCQZI,G,MAdI,WACf,OACI,yBAAKJ,UAAU,YACX,yBAAKA,UAAU,wBACX,yBAAKA,UAAU,8BACX,yBAAKA,UAAU,wBACf,yBAAKA,UAAU,2BAEnB,0BAAMA,UAAU,cAAhB,2CCXHK,EAAe,SAACC,EAAGC,GAU9B,IATA,IAAIC,EAAqB,GACrBC,EAAa,GAEXC,EAAYJ,EAAI,EAChBK,EAAYJ,EAAI,EAElBK,EAAS,EACTC,EAFe,GAIVC,EAAI,EAAGA,EAAIP,EAAGO,IAAK,CAC1B,IAAIC,EAAS,GACTC,EAAS,EACbH,GAAUD,EAGV,IAFA,IAAIK,EARa,GAURC,EAAI,EAAGA,EAAIZ,EAAGY,IACrBT,EAAWU,KAAX,UAAmBL,EAAnB,YAAwBI,IACxBD,GAAUD,EACVD,EAAOI,KAAP,UAAeC,KAAKC,MAAMR,GAA1B,YAAqCO,KAAKC,MAAMJ,KAChDD,EAAS,GAAKN,EAGhBE,EAAS,GAAKD,EACdH,EAAmBW,KAAKJ,GAG1B,MAAO,CAAEP,qBAAoBC,eC3BlBa,GAAa,GACbC,GAAc,GCkGZC,E,2MAzFbC,MAAQ,CACNC,iBAAiB,EACjBC,gBAAgB,EAChBnB,mBAAoB,GACpBC,WAAY,GACZmB,oBAAoB,G,EAGtBC,gCAAkC,WAChC,EAAKC,SAAS,CACZH,gBAAgB,EAChBD,iBAAiB,EACjBxB,IAAKoB,EACLnB,KAAMoB,IAER,IAAIQ,SAAQ,SAACC,GACXC,YAAW,WACT,EAAKH,SAAS,CAAEH,gBAAgB,IAChC,EAAKO,uCACJ,S,EAIP7B,aAAe,SAACC,EAAGC,GACjB,IAAI4B,EAAe9B,EAAaC,EAAGC,GAEnC,EAAKuB,SAAS,CACZtB,mBAAoB2B,EAAa3B,mBACjCC,WAAY0B,EAAa1B,c,EA0B7B2B,0BAA4B,WAC1B,IAAIC,EAAK,YAAO,EAAKZ,MAAMhB,YACvB6B,EAAQlB,KAAKmB,MAAMnB,KAAKoB,SAAWH,EAAMI,QACzCC,EAAUL,EAAMC,GAGpB,OAFAD,EAAMM,OAAOL,EAAO,GACpB,EAAKR,SAAS,CAAErB,WAAY4B,IACrBK,EAAQE,MAAM,M,oGA5Be,IAAD,OACnCC,KAAKC,SAAWC,aAAY,WAAQ,EAAKC,yBAA0B,O,6CAQ7C,IAAD,OACjBC,EAAM,YAAOJ,KAAKpB,MAAMjB,oBAC5B,GAAIqC,KAAKpB,MAAMhB,WAAWgC,OAAQ,CAChC,IAAIS,EAAcL,KAAKT,4BACnBe,EAASF,EAAOC,EAAY,IAAIA,EAAY,IAAIN,MAAM,KAC1DC,KAAKf,SAAS,CAAE5B,IAAKiD,EAAO,GAAIhD,KAAMgD,EAAO,KAAM,kBAAMC,QAAQC,IAAI,EAAK5B,a,0CAI1D6B,GAClBT,KAAKf,SAAS,CAAEF,mBAAoB0B,M,0CAapCT,KAAKxC,aAAa,EAAG,K,+BAIrB,OACE,yBAAKL,UAAU,uBACZ6C,KAAKpB,MAAMC,gBACT,4BACC1B,UAAU,eACVuD,QAASV,KAAKhB,iCAFf,SAMA,yBAAK7B,UAAU,cACb6C,KAAKpB,MAAME,gBAAkB,kBAAC,EAAD,MAC9B,kBAAC,EAAD,CACEzB,IAAK2C,KAAKpB,MAAMvB,IAChBC,KAAM0C,KAAKpB,MAAMtB,a,GAnFbqD,IAAMC,WCJxBC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.0f216643.chunk.js","sourcesContent":["import React from 'react';\nimport './animationOfCalibration.css';\n\nconst AnimationOfCalibration = (props) => {\n\n    //сделать классом а в componentDidMount засетить интервал в 1 сек для изменения параметра isCalibrationStart\n    return (\n        <div className=\"circles--animated centered\" style={{ top: `${props.top}%`, left: `${props.left}%` }}>\n            <div className=\"circle big centered\"></div>\n            <div className=\"circle small centered\"></div>\n        </div>\n    );\n}\n\nexport default AnimationOfCalibration;","import React from 'react';\nimport './helloBlock.css';\n\nconst HelloBlock = () => {\n    return (\n        <div className=\"centered\">\n            <div className=\"hello-block centered\">\n                <div className=\"circles--animated centered\">\n                    <div className=\"circle big centered\"></div>\n                    <div className=\"circle small centered\"></div>\n                </div>\n                <span className=\"hello-text\">Look directly at calibration points</span>\n            </div>\n        </div>\n    );\n}\n\nexport default HelloBlock;","export const createMatrix = (x, y) => {\n  let circlePointsMatrix = [];\n  let randomizer = [];\n  // let circlePointsMatrixLength = [x, y];\n  const xMinusOne = x - 1;\n  const yMinusOne = y - 1;\n  const firstPoint = 10;\n  let yConst = 0;\n  let pointY = firstPoint;\n\n  for (let i = 0; i < y; i++) {\n    let xArray = [];\n    let xConst = 0;\n    pointY += yConst;\n    let pointX = firstPoint;\n\n    for (let j = 0; j < x; j++) {\n      randomizer.push(`${i},${j}`);\n      pointX += xConst;\n      xArray.push(`${Math.round(pointY)},${Math.round(pointX)}`);\n      xConst = 80 / xMinusOne;\n    }\n\n    yConst = 80 / yMinusOne;\n    circlePointsMatrix.push(xArray);\n  }\n  // return { circlePointsMatrix, circlePointsMatrixLength, randomizer };\n  return { circlePointsMatrix, randomizer };\n}","export const START_TOP = -10;\nexport const START_LEFT = -10;","import React from 'react';\nimport './App.css';\n\nimport AnimationOfCalibration from '../animationOfCalibration/AnimationOfCalibration';\nimport HelloBlock from '../helloBlock/HelloBlock';\nimport { createMatrix } from '../helper/Helper';\nimport { START_TOP, START_LEFT } from '../constants/MainConstants';\n\nclass App extends React.Component {\n\n  state = {\n    showStartButton: true,\n    showHelloBlock: false,\n    circlePointsMatrix: [],\n    randomizer: [],\n    isCalibrationStart: false,\n  }\n\n  showHelloBlockAndStartAnimation = () => {\n    this.setState({\n      showHelloBlock: true,\n      showStartButton: false,\n      top: START_TOP,\n      left: START_LEFT,\n    });\n    new Promise((res) => {\n      setTimeout(() => {\n        this.setState({ showHelloBlock: false });\n        this.changeCirclePositionWithRightDelay()\n      }, 3000)\n    })\n  }\n\n  createMatrix = (x, y) => {\n    let matrixObject = createMatrix(x, y);\n\n    this.setState({\n      circlePointsMatrix: matrixObject.circlePointsMatrix,\n      randomizer: matrixObject.randomizer,\n    })\n  }\n\n  changeCirclePositionWithRightDelay() {\n    this.interval = setInterval(() => { this.changeCirclePosition() }, 3000);\n\n    // .then(() => {\n    //   setInterval(() => { this.setState({ isCalibrationStart: true }) }, 1000);\n    // })\n\n  }\n\n  changeCirclePosition() {\n    let matrix = [...this.state.circlePointsMatrix];\n    if (this.state.randomizer.length) {\n      let coordinates = this.getRandomElementFromArray();\n      let values = matrix[coordinates[0]][coordinates[1]].split(',');\n      this.setState({ top: values[1], left: values[0] }, () => console.log(this.state));\n    }\n  }\n\n  changeAnimationFlag(flag) {\n    this.setState({ isCalibrationStart: flag });\n  }\n\n  getRandomElementFromArray = () => {\n    let array = [...this.state.randomizer];\n    let index = Math.floor(Math.random() * array.length);\n    let element = array[index];\n    array.splice(index, 1);\n    this.setState({ randomizer: array })\n    return element.split(',');\n  }\n\n  componentDidMount() {\n    this.createMatrix(5, 3);\n  }\n\n  render() {\n    return (\n      <div className=\"animation-container\">\n        {this.state.showStartButton ?\n          (<button\n            className=\"start-button\"\n            onClick={this.showHelloBlockAndStartAnimation}>\n            Start\n          </button>)\n          :\n          (<div className=\"main-scene\">\n            {this.state.showHelloBlock && <HelloBlock />}\n            <AnimationOfCalibration\n              top={this.state.top}\n              left={this.state.left} />\n          </div>)\n        }\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from '../src/mainApp/App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}